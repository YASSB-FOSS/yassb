import { WORKING_DIR } from '@yassb/config/working-dir.constant';
import { TemplateToHtmlFiles } from '@yassb/directives/pages-generator/template-to-html-files.class';
import { ListFiles } from '@yassb/tools/file-system-helpers/list-files.class';
import { YassbConfig } from '@yassb/yassb';

/**
 * Generates an html file based on each template found in the dir `pagesToGenerate`.
 * A new page based on the template is created based for each supported file found in the source path declared in the template itself.
 * This directive must be run befor all others.
 * In this way, we can invoke other directives also on the files generated by this directive.
 *
 * @remarks
 * The generated html files are placed in the `WORKING_DIR.out` path so that `ComponentsAdder` then parses them.
 */
export class GeneratePagesFromMd {

  /**
   * Html templates found in the folder passed as a value to the directive
   */
  private htmlTemplates: Array<string> = [];

  /**
   * This directive is a special one, only needs the config options.
   *
   * @param configOptions
   */
  constructor(
    private configOptions: YassbConfig
  ) { }

  /**
   * Retrieves the list of templates to parse with `ListFiles` and delegates the page generation `forEach` file to `TemplateToHtmlFiles`
   */
  public make(): void {
    this.htmlTemplates = new ListFiles(WORKING_DIR.pagesToGenerate, file => file.endsWith('.html') || file.endsWith('.htm')).init();
    this.htmlTemplates.forEach(pathTohtmlTemplate => new TemplateToHtmlFiles(pathTohtmlTemplate, this.configOptions).init());
  }

}
